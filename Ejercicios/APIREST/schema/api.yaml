openapi: 3.0.3
info:
  title: Library
  version: 1.0.0
  description: |-
    My Library documentation
tags:
  - name: book
    description: Everything about your Books
servers:
  - url: http://localhost:3010/api/v2

paths:
  /book:
    get:
      tags:
        - book
      summary: GET all books
      description: GET all books with optional pagination
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of results
        - in: query
          name: next
          schema:
            type: string
          description: ObjectId for pagination (gets books with _id < next)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Books'
    post:
      tags:
        - book
      summary: Add a new book to the library
      description: Add a new book to the library
      operationId: addBook
      requestBody:
        description: Book object to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input

  /book/{bookId}:
    parameters:
      - $ref: '#/components/parameters/ID'
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    delete:
      tags:
        - book
      summary: Deletes a book
      operationId: deleteBook
      responses:
        '200':
          description: Book deleted successfully
        '400':
          description: Invalid book ID
        '404':
          description: Book not found
    patch:
      tags:
        - book
      summary: Partially update a book
      operationId: patchBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: Book updated successfully
        '400':
          description: Invalid ID or input
        '404':
          description: Book not found
    put:
      tags:
        - book
      summary: Replace a book
      operationId: putBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        '200':
          description: Book replaced successfully
        '400':
          description: Invalid ID or input
        '404':
          description: Book not found

components:
  parameters:
    ID:
      description: Book ID
      name: bookId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"

  schemas:
    Books:
      type: object
      properties:
        results:
          $ref: "#/components/schemas/BooksArray"
        next:
          type: string
          description: Book next ID for pagination search
      required:
        - results
        - next

    BooksArray:
      type: array
      items:
        $ref: "#/components/schemas/BookMin"

    BookMin:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
          description: Book title
        author:
          type: string
          description: Book author
        link:
          type: string
          description: API link to access the book
      required:
        - _id
        - title
        - author
        - link

    Book:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        title:
          type: string
          description: Book title
        author:
          type: string
          description: Book author
        link:
          type: string
          description: API link to access the book
      required:
        - title
        - author

    ID:
      type: string
      description: Book ID from the database
      example: 6463448ae7684d03f44af30f
      format: objectid
servers:
  - url: http://localhost:3000/api/v1
    description: Local server for development and testing
